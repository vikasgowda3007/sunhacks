import * as _angular_platform_browser from '@angular/platform-browser';
import * as _angular_core from '@angular/core';
import { InputSignal, InputSignalWithTransform, ElementRef, ModuleWithProviders } from '@angular/core';

interface IIcon {
    content?: InputSignal<string | string[] | any[] | undefined>;
    customClasses?: InputSignal<NgCssClass | undefined>;
    height?: InputSignal<string | undefined>;
    name?: InputSignalWithTransform<string, string>;
    pointerEvents?: InputSignal<IPointerEvents>;
    size?: InputSignal<IconSize>;
    title?: InputSignal<string | undefined>;
    viewBoxInput?: InputSignal<string | undefined>;
    width: InputSignal<string | undefined>;
    xmlns?: InputSignal<string>;
}
type IconSize = 'custom' | 'custom-size' | 'sm' | 'lg' | 'xl' | 'xxl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl' | '9xl' | string;
type IPointerEvents = 'auto' | 'bounding-box' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'none';
type NgCssClass = string | string[] | Set<string> | {
    [klass: string]: any;
};

declare class IconDirective implements IIcon {
    #private;
    readonly content: _angular_core.InputSignal<string | any[] | string[] | undefined>;
    readonly customClasses: _angular_core.InputSignal<NgCssClass | undefined>;
    readonly size: _angular_core.InputSignal<string>;
    readonly title: _angular_core.InputSignal<string | undefined>;
    readonly height: _angular_core.InputSignal<string | undefined>;
    readonly width: _angular_core.InputSignal<string | undefined>;
    readonly name: _angular_core.InputSignalWithTransform<string, string>;
    readonly viewBoxInput: _angular_core.InputSignal<string | undefined>;
    readonly xmlns: _angular_core.InputSignal<string>;
    readonly pointerEvents: _angular_core.InputSignal<IPointerEvents>;
    readonly role: _angular_core.InputSignal<string>;
    readonly hostClasses: _angular_core.Signal<NgCssClass>;
    readonly viewBox: _angular_core.Signal<string>;
    readonly innerHtml: _angular_core.Signal<_angular_platform_browser.SafeHtml>;
    readonly code: _angular_core.Signal<string | any[]>;
    readonly scale: _angular_core.Signal<string>;
    readonly computedSize: _angular_core.Signal<string>;
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<IconDirective, never>;
    static ɵdir: _angular_core.ɵɵDirectiveDeclaration<IconDirective, "svg[cIcon]", ["cIcon"], { "content": { "alias": "cIcon"; "required": false; "isSignal": true; }; "customClasses": { "alias": "customClasses"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "title": { "alias": "title"; "required": false; "isSignal": true; }; "height": { "alias": "height"; "required": false; "isSignal": true; }; "width": { "alias": "width"; "required": false; "isSignal": true; }; "name": { "alias": "name"; "required": false; "isSignal": true; }; "viewBoxInput": { "alias": "viewBox"; "required": false; "isSignal": true; }; "xmlns": { "alias": "xmlns"; "required": false; "isSignal": true; }; "pointerEvents": { "alias": "pointer-events"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}

declare class IconComponent implements IIcon {
    #private;
    readonly content: _angular_core.InputSignal<string | any[] | string[] | undefined>;
    readonly attributes: _angular_core.InputSignal<Record<string, any>>;
    readonly customClasses: _angular_core.InputSignal<NgCssClass | undefined>;
    readonly size: _angular_core.InputSignal<string>;
    readonly title: _angular_core.InputSignal<string | undefined>;
    readonly use: _angular_core.InputSignal<string>;
    readonly height: _angular_core.InputSignal<string | undefined>;
    readonly width: _angular_core.InputSignal<string | undefined>;
    readonly name: _angular_core.InputSignalWithTransform<string, string>;
    readonly viewBoxInput: _angular_core.InputSignal<string | undefined>;
    readonly svgElementRef: _angular_core.Signal<ElementRef<any> | undefined>;
    readonly viewBox: _angular_core.Signal<string>;
    readonly innerHtml: _angular_core.Signal<_angular_platform_browser.SafeHtml>;
    readonly code: _angular_core.Signal<string | any[]>;
    readonly scale: _angular_core.Signal<string>;
    readonly computedSize: _angular_core.Signal<string>;
    readonly computedClasses: _angular_core.Signal<NgCssClass>;
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<IconComponent, never>;
    static ɵcmp: _angular_core.ɵɵComponentDeclaration<IconComponent, "c-icon", ["cIconComponent"], { "content": { "alias": "content"; "required": false; "isSignal": true; }; "attributes": { "alias": "attributes"; "required": false; "isSignal": true; }; "customClasses": { "alias": "customClasses"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "title": { "alias": "title"; "required": false; "isSignal": true; }; "use": { "alias": "use"; "required": false; "isSignal": true; }; "height": { "alias": "height"; "required": false; "isSignal": true; }; "width": { "alias": "width"; "required": false; "isSignal": true; }; "name": { "alias": "name"; "required": false; "isSignal": true; }; "viewBoxInput": { "alias": "viewBox"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}

declare class IconModule {
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<IconModule, never>;
    static ɵmod: _angular_core.ɵɵNgModuleDeclaration<IconModule, never, [typeof IconComponent, typeof IconDirective], [typeof IconComponent, typeof IconDirective]>;
    static ɵinj: _angular_core.ɵɵInjectorDeclaration<IconModule>;
}

interface IIconSet {
    [iconName: string]: string[];
}
declare class IconSetService {
    #private;
    get iconNames(): Record<string, string>;
    get icons(): IIconSet;
    set icons(iconSet: IIconSet);
    getIcon(name: string): string[];
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<IconSetService, never>;
    static ɵprov: _angular_core.ɵɵInjectableDeclaration<IconSetService>;
}

declare class IconSetModule {
    constructor();
    static forRoot(): ModuleWithProviders<IconSetModule>;
    static ɵfac: _angular_core.ɵɵFactoryDeclaration<IconSetModule, never>;
    static ɵmod: _angular_core.ɵɵNgModuleDeclaration<IconSetModule, never, never, never>;
    static ɵinj: _angular_core.ɵɵInjectorDeclaration<IconSetModule>;
}

export { IconComponent, IconDirective, IconModule, IconSetModule, IconSetService };
export type { IIconSet };
